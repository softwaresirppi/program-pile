#include <stdio.h>
#include <stdint.h>
#include <math.h>
#include <stdbool.h>
#include <string.h>


void memprint(uint8_t *x, size_t size){
	while(size){
		printf("(%p)->[%x:%c]\n", x, *x, *x);
		size--;
		x++;
	}
}
typedef bool(*BoolFunc)(bool, bool);
void truthTable(char* name, BoolFunc f){
	printf("%s\n", name);
	for(uint8_t x = 0; x < 2; x++){
		for(uint8_t y = 0; y < 2; y++){
			printf("|%d|%d|%d|\n", x, y, f(x, y));
		}
	}
}

#define gives(x) {return (x);}

int dsum(int x){
	int sum = 0;
	while(x != 0){
		sum += x % 10;
		x /= 10;
	}
	return sum;
}

int search(int n, int *arr, int startIndex, int element){
	for(int i = startIndex; i < n; i++)
		if(arr[i] == element)
			return i;
	return -1;
}

void searchTraverse(int n, int* array, int element, void(*handler)(int)){
		int pos = -1;
		while((pos = search(n, array, pos + 1, element)) != -1){
			handler(pos);
		}

}
// -1 -2 -3 0 1 2 3
// -3<-2<-1<0<1<2<3

compare(int a, int b){
  if(a < 0 && b < 0){
    return a < b;
  } else {
    return a > b;
  }
}
signInsensitiveSort(size_t n, int* array){
  for(size_t bubbled = 0; bubbled < n; bubbled++){
    for(size_t i = 0; i < n - 1 - bubbled; i++){
      if(compare(array[i], array[i+1])){
	printf("Oops. %d and %d are out of place\n", array[i], array[i+1]);
	array[i] ^= array[i+1];
	array[i+1] ^= array[i];
	array[i] ^= array[i+1];
      }
    }
  }
}
// -1, 2 --> false
// -1, -3 --> false
memswap(uint8_t *a, uint8_t *b, size_t n){
  for(size_t i = 0; i < n; i++){
    a[i] ^= b[i];
    b[i] ^= a[i];
    a[i] ^= b[i];
  }
}
#define N 7

fibo(int x){
  if(x == 0) return 0;
  if(x == 1) return 1;
  return fibo(x - 1) + fibo(x - 2);
}
static int statik;
foo(int local){
	printf("Loc: %d Stat:%d", local, statik);
	statik--;
}
#define X 3
#define Y 2
#define Z 4

#define xor_swap(a, b) a ^= b; b ^= a; a ^= b;

void swap(char *x, char *y){
  *x ^= *y;
  *y ^= *x;
  *x ^= *y;
}

#include <stdio.h>

#define ONE 1
#define ZERO 0
#define NAMESPACE foo

#define GLUE(x, y) x ## y
#define fn(name) GLUE(NAMESPACE, name)

int fn(um)(int x){
    printf("\n foo0...%d\n", x);
}

int main(){
  fn(um);
  return 0;
}
